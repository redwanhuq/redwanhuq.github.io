<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>In Machines We Trust (Posts about generator function)</title><link>https://inmachineswetrust.com/</link><description></description><atom:link href="https://inmachineswetrust.com/categories/generator-function.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 23 Aug 2020 20:35:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Iterables, iterators and generators, oh my! Part 2</title><link>https://inmachineswetrust.com/posts/understanding-generators/</link><dc:creator>Red Huq</dc:creator><description>&lt;div&gt;&lt;style type="text/css"&gt;
div.prompt {
	display: none;
}

div.rendered_html table, .rendered_html th, .rendered_html tr, .rendered_html td {
  font-size: 16px;
  border: 1px solid black;
}


&lt;/style&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In a &lt;a href="http://inmachineswetrust.com/posts/understanding-iterators/"&gt;previous post&lt;/a&gt;, we learned about iterators—one of the most powerful programming constructs. Our discussion divulged their role as a fundamental but hidden component of Python's &lt;code&gt;for&lt;/code&gt; loop, which led to a startling revelation regarding the &lt;code&gt;for&lt;/code&gt; loop itself (no spoilers here). We also discovered how to implement the iterator protocol to create our very own iterators, even constructing ones that represent infinite data structures. In this post, I'd like to build upon our knowledge and introduce a more elegant and efficient means for producing iterators. However, if you're not comfortable with the iterator protocol and the inner workings of iterators, I &lt;em&gt;strongly&lt;/em&gt; recommend familiarizing yourself with &lt;a href="http://inmachineswetrust.com/posts/understanding-iterators/"&gt;Part 1&lt;/a&gt; first.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://inmachineswetrust.com/posts/understanding-generators/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>generator</category><category>generator function</category><category>iterator</category><category>python</category><guid>https://inmachineswetrust.com/posts/understanding-generators/</guid><pubDate>Fri, 03 Mar 2017 16:00:00 GMT</pubDate></item></channel></rss>