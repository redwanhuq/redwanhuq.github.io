<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>In Machines We Trust (Posts about python)</title><link>https://redwanhuq.github.io/</link><description></description><atom:link rel="self" type="application/rss+xml" href="https://redwanhuq.github.io/categories/python.xml"></atom:link><language>en</language><lastBuildDate>Wed, 10 May 2017 13:31:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Applying k-means clustering to flow cytometry analysis</title><link>https://redwanhuq.github.io/posts/k-means_clustering/</link><dc:creator>Redwan Huq</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Is it possible for a machine to group together similar data on its own? Absolutely—this is what clustering algorithms are all about. These algorithms fall under a branch of machine learning called &lt;strong&gt;unsupervised learning&lt;/strong&gt;. In this branch, we give a machine an &lt;em&gt;unlabeled&lt;/em&gt; training set containing data regarding the features but not the classes. Algorithms are left to their own devices to discover the underlying structure concealed within the data. This is in stark contrast to &lt;a href="http://machinemadephd.com/posts/building-logistic-regression/"&gt;supervised learning&lt;/a&gt;, where the correct answers are available and utilized to train a predictive model.&lt;/p&gt;
&lt;p&gt;In this post, we'll not only learn about an algorithm called &lt;strong&gt;$k$-means clustering&lt;/strong&gt;, but construct one from scratch. Additionally, we'll apply this algorithm to automate an aspect of a widely used life sciences technique called &lt;strong&gt;flow cytometry&lt;/strong&gt;.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://redwanhuq.github.io/posts/k-means_clustering/"&gt;Read more…&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>clustering</category><category>flow cytometry</category><category>k-means</category><category>machine learning</category><category>python</category><category>unsupervised learning</category><guid>https://redwanhuq.github.io/posts/k-means_clustering/</guid><pubDate>Thu, 16 Mar 2017 14:00:00 GMT</pubDate></item><item><title>Iterables, iterators and generators, oh my! Part 2</title><link>https://redwanhuq.github.io/posts/understanding-generators/</link><dc:creator>Redwan Huq</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In a &lt;a href="http://machinemadephd.com/posts/understanding-iterators/"&gt;previous post&lt;/a&gt;, we learned about iterators—one of the most powerful programming constructs. Our discussion divulged their role as a fundamental but hidden component of Python's &lt;code&gt;for&lt;/code&gt; loop, which led to a startling revelation regarding the &lt;code&gt;for&lt;/code&gt; loop itself (no spoilers here). We also discovered how to implement the iterator protocol to create our very own iterators, even constructing ones that represent infinite data structures. In this post, we'll build upon our knowledge and learn about more elegant and efficient means for producing iterators. However, if you're not comfortable with the iterator protocol and the inner workings of iterators, I &lt;em&gt;strongly&lt;/em&gt; recommend familiarizing yourself with &lt;a href="http://machinemadephd.com/posts/understanding-iterators/"&gt;Part 1&lt;/a&gt; first.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://redwanhuq.github.io/posts/understanding-generators/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>generator</category><category>generator function</category><category>iterator</category><category>python</category><guid>https://redwanhuq.github.io/posts/understanding-generators/</guid><pubDate>Fri, 03 Mar 2017 16:00:00 GMT</pubDate></item><item><title>Building a logistic regression classifier from the ground up</title><link>https://redwanhuq.github.io/posts/building-logistic-regression/</link><dc:creator>Redwan Huq</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The logistic regression classifier is a widely used machine learning model that predicts the group or category that an observation belongs to. When implementing this model, most people rely on &lt;a href="http://scikit-learn.org/stable/"&gt;some package&lt;/a&gt; or API: just hand over a dataset, pick a few parameters and out come the predictions. However, I'm not a fan of using black boxes without first understanding what's going on inside. In fact, lifting the hood on this classifier provides a segue to more complex models such as neural networks. Therefore, this post will explore the methodology behind logistic regression classifiers and walk through how to construct one from scratch.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://redwanhuq.github.io/posts/building-logistic-regression/"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>classification</category><category>gradient descent</category><category>logistic regression</category><category>machine learning</category><category>python</category><category>supervised learning</category><guid>https://redwanhuq.github.io/posts/building-logistic-regression/</guid><pubDate>Mon, 13 Feb 2017 16:00:00 GMT</pubDate></item><item><title>Iterables, iterators and generators, oh my! Part 1</title><link>https://redwanhuq.github.io/posts/understanding-iterators/</link><dc:creator>Redwan Huq</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Iterators and generators are among my favorite programming tools—they're also some of the most powerful. These constructs enable us to write cleaner, more flexible and higher performance code; undoubtedly an invaluable addition to any programmer's toolbox. In addition, iterators and generators are an elegant means to work with large and potentially infinite data structures, coming in handy for data science. However, they can be some of the more perplexing concepts to grasp at first.&lt;/p&gt;
&lt;p&gt;This article aims to deliver a gentle but in-depth introduction to iterators and generators in Python, although they're prevalent in other languages too. Nevertheless, in order to appreciate generators, we need to first have a good handle on iterators. And to understand iterators, we need to start with iterables.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://redwanhuq.github.io/posts/understanding-iterators/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>generator</category><category>iterable</category><category>iterator</category><category>python</category><guid>https://redwanhuq.github.io/posts/understanding-iterators/</guid><pubDate>Mon, 30 Jan 2017 14:00:00 GMT</pubDate></item><item><title>Exploring the Pokemon dataset with pandas and seaborn</title><link>https://redwanhuq.github.io/posts/exploring-pokemon-dataset/</link><dc:creator>Redwan Huq</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The Pokemon dataset is a complete listing of all Pokemon species as of mid-2016, containing data about their type and statistics. Considering how diverse Pokemon are, it's worthwhile analyzing this datset to identify any insights regarding the design of new Pokemon, how the game is balanced and to potentially assist players in selecting the best Pokemon, if there exists one. And having been a fervent Pokemon fan as a kid, I'm also dreadfully curious!
&lt;/p&gt;&lt;p&gt;&lt;a href="https://redwanhuq.github.io/posts/exploring-pokemon-dataset/"&gt;Read more…&lt;/a&gt; (26 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>data analytics</category><category>data visualization</category><category>exploratory analysis</category><category>pandas</category><category>pokemon</category><category>python</category><category>seaborn</category><guid>https://redwanhuq.github.io/posts/exploring-pokemon-dataset/</guid><pubDate>Thu, 19 Jan 2017 16:00:00 GMT</pubDate></item></channel></rss>